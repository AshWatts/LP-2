#include <iostream>
#include <vector>
#include <iomanip>

using namespace std;

const int BLOCK_SIZE = 4; // 4 bytes for SAES
const int KEY_SIZE = 16;   // 16 bytes key for SAES

// S-Box for SAES
const int S_BOX[16][16] = {
    {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
    {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
    {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
    {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
    {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
    {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
    {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
    {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
    {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
    {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
    {0xe0, 032, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac,  0x62, 0x91, 0x95, 0xe4, 0x79},
    {0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba},
    {0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70},
    {0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1},
    {0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c},
    {0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16, 0x7b}
};

// Function to perform the S-Box substitution
void substituteBytes(vector<uint8_t>& state) {
    for (int i = 0; i < BLOCK_SIZE; ++i) {
        for (int j = 0; j < BLOCK_SIZE; ++j) {
            uint8_t byte = state[i * BLOCK_SIZE + j];
            state[i * BLOCK_SIZE + j] = S_BOX[byte >> 4][byte & 0x0F];
        }
    }
}

// Function to perform the shift rows operation
void shiftRows(vector<uint8_t>& state) {
    uint8_t temp;

    // Shift the second row
    temp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = temp;

    // Shift the third row
    temp = state[2];
    state[2] = state[10];
    state[10] = state[6];
    state[6] = state[14];
    state[14] = temp;

    // Shift the fourth row
    temp = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = state[3];
    state[3] = temp;
}

// Function to mix columns
void mixColumns(vector<uint8_t>& state) {
    for (int i = 0; i < BLOCK_SIZE; ++i) {
        uint8_t a = state[i * BLOCK_SIZE];
        uint8_t b = state[i * BLOCK_SIZE + 1];
        uint8_t c = state[i * BLOCK_SIZE + 2];
        uint8_t d = state[i * BLOCK_SIZE + 3];

        state[i * BLOCK_SIZE] = (a ^ b ^ c ^ d);
        state[i * BLOCK_SIZE + 1] = (a ^ b);
        state[i * BLOCK_SIZE + 2] = (b ^ c);
        state[i * BLOCK_SIZE + 3] = (c ^ d);
    }
}

// Function to add round key
void addRoundKey(vector<uint8_t>& state, const vector<uint8_t>& key) {
    for (int i = 0; i < BLOCK_SIZE * BLOCK_SIZE; ++i) {
        state[i] ^= key[i];
    }
}

// Function to encrypt a block of data
void encryptBlock(vector<uint8_t>& block, const vector<uint8_t>& key) {
    addRoundKey(block, key);
    for (int round = 0; round < 9; ++round) {
        substituteBytes(block);
        shiftRows(block);
        mixColumns(block);
        addRoundKey(block, key );
    }
    substituteBytes(block);
    shiftRows(block);
    addRoundKey(block, key);
}

// Function to decrypt a block of data
void decryptBlock(vector<uint8_t>& block, const vector<uint8_t>& key) {
    addRoundKey(block, key);
    for (int round = 0; round < 9; ++round) {
        // Inverse operations would be implemented here
        // For simplicity, this example does not include the inverse functions
    }
    // Final round
    addRoundKey(block, key);
}

// Main function to demonstrate encryption and decryption
int main() {
    vector<uint8_t> key = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x97, 0x3c, 0x76, 0x4c, 0x39, 0x0b};
    vector<uint8_t> block = {0x32, 0x88, 0x31, 0xe0, 0x43, 0x5a, 0x31, 0x37, 0xf6, 0x30, 0x98, 0x07, 0xa8, 0x8d, 0x0e, 0x0b};

    cout << "Original Block: ";
    for (auto byte : block) {
        cout << hex << setw(2) << setfill('0') << (int)byte << " ";
    }
    cout << endl;

    encryptBlock(block, key);
    cout << "Encrypted Block: ";
    for (auto byte : block) {
        cout << hex << setw(2) << setfill('0') << (int)byte << " ";
    }
    cout << endl;

    decryptBlock(block, key);
    cout << "Decrypted Block: ";
    for (auto byte : block) {
        cout << hex << setw(2) << setfill('0') << (int)byte << " ";
    }
    cout << endl;

    return 0;
}